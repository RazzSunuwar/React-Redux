Pure Component

Regular Component:
A regular component does not implement the 'shouldComponentUpdate' method.
It always returns true by default.

Pure Component:
A pure component on the other hand implements 'shouldComponentUpdate' with shallow props and state comparison.


SC of prevState with currentState       Difference?
                                    ====================>   Re-render component
SC of prevProps with currentState


Shallow comparison (sc)

Primitive Types
a (SC) b returns true if a and b have same value and are of the same type
Ex: string 'Robert' (SC) string 'Robert' returns true

Complex Types
a (SC) b returns true if a and b reference the exact same object

Example: 1
var a = [1, 2, 3];
var b = [1, 2, 3];
var c = a;

var ab_eq = (a === b); // false
var ac-eq = (a === c); // true

Example: 2
var a = { x: 1, y: 2 };
var b = { x: 1, y: 2 };
var c = a;

var ab_eq = (a === b); // false
var ac-eq = (a === c); // true



Error Boundary: A class component that implements either one or both of the lifecycle methods
getDerivedStateFromError or componentDidCatch becomes an error boundary.

The static method getDerivedStateFromError method is used to render a fallback UI after an error is thrown
and the componentDidCatch method is used to log the error information.

Error boudaries are React Components that catch JavaScript error in their child component tree, log 
those errors, and display a fall-back UI.

A class component becomes an Error Boundary by defining either  or both of getDerivedStateFromError and
componentDidCatch lifecycle methods.

The placement of the Error Boundary also matters as it controls if the entire app 
should have the fall-back UI or just the component  causing the problem.

Provide a way to gracefully handle error in application code. 