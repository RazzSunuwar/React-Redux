Functional:
Simple Functions
Use Func components as much as possible
Absense of 'this' keyword
Solution without using state
Statless/ Dumb / Presentational

Class:
More feature rich
Maintain their own private data -state
Complex UI logic
Provide lifecycle hooks
Stateful/ Smart/ Container

Hooks:
No breaking changes.
Completely opt-in & 100% backwards-compatible.
Component types - Functional components and class components.
Using state, lifecycle methods and 'this' binding.
After understanding state, event binding and lifecycle hooks in class components.

JSX:
JavaScript XML (JSX) - Extension to the JavaScript language syntax.
Write XML-like code for elements and components.
JSX tags have a tag name, attributes, and children.
JSX is not a necessity to write React applications.
JSX makes your react code simpler and elegant.
JSX ultimately transpiles to pure JavaScript which is understood by the browsers.

JSX differences:
Class -> className
for -> htmlFor
camelCase property naming convention
- onclick -> onclick
- tabindex -> tabindex


props vs state

props:
props get passed to the component
Function parameters
props are immutabale
props - Functional Components
this.props - Class Components

state:
state is managed within the component
Variable declared in the function body
state can be change or mutable
useState Hook - Functional Component
this.state - Class Component

Super:
The super keyword refers to the parent class. It is used to call the constructor 
of the parent class and to access the parent's properties and methods.

setState:
Always make use of setState and never modify the state directly

Code has to be executed after the state has been updated? Place the code callback function which
is the second arguments to the setState method

When you have to update state based on the previous state value, pass in a function as an arguments
instead of the regular object.

List and Keys
A 'Key' is a special string attribute you need to include when creating lists of elements

Keys give the elements a stable identitiy.

Keys help React identify which items have changed, are added, or are removed.

Help in effcient update of the user interface.

Index as key
When to use index as a key?

1. The items in your list to do have a unique id.
2. The list is a static list and will not change.
3. The list will never be reordered or filtered.

Styling React Components 
1. CSS stylesheets
2. Inline styling 
3. CSS Modules
4. CSS in JS Libaries (Styled Components)


Lifecycle Methods

Mounting: It is called when an instance of a component is being created and inserted into the DOM.
=> constructor, static getDerivedStateFromProps, render and componentDidMount

Updating: It is called when a component is being re-rendered as a result of changes to either its
props or state.
=> static getDerivedStateFromProps, shouldComponentUpdate, render and componentDidMount

Umounting: It is called when a component is being removed from the DOM
=> componentWillUmount

Error Handling: It is called when there is an error during rendering, in a lifecycle method,
or in the constructor of any child component.
=> static getDerivedStateFromError and componentDidCatch



Mounting Lifecycle Methods

constructor(props)
=> A special function that will get called whenever a new component is created.

=> Initializing state
Binding the events handlers

=> Do not cause side effects. Ex: HTTP requests

super(props)
Directly overwite this.state


constructor(props)
static getDerivedStateFromProps(props, state) 
=> When the state of the component depends on changes in props over time.
=> Set the state
=> Do not cause side effects. Ex: HTTP requests

constructor(props)
staticc getDerivedStateFromProps(props, state)
render()
=> Only required method
=> Read props and state return JSX
=> Do not change state or interact with DOM or make ajax calls.
=> Children components lifecycle methods are also executed.

constructor(props)
static getDerivedStateFromProps(props, state)
render()
componentDidMount()
=> Invoked immediately after a component and all its children components have been rendered to the DOM.
=>Cause side effects. Ex: Interact with the DOM or perform any ajax calls to load data.



Updating Lifecycle Methods
static getDerivedStateFromProps(props, state)
=> Methods is called everytime a component is re-render
=> Set the state
=> Do not cause side effects. Ex. HTTP requests

static getDerivedStateFromProps(props, state)
shouldComponentUpdate(nextProps, nextState)
=> Dictates if the component should re-render or not
=> Performance optimization
=> Do not cause side effects. Ex: HTTP requests
Calling the setState method

static getDerivedStateFromProps(props, state)
shouldComponentUpdate(nextProps, nextState)
render()
=> Only required method
Read props & state and return JSX
Do not change state or interact with DOM or make ajax calls

constructor(props)
static getDerivedStateFromProps(props, state)
render()
getSnapshotBeforeUpdate(preProps, preState)
=> Called right before the changes from the virtual DOM are to be reflected in the DOM
=> Capture some information from the DOM
=> Methods will either return null or return a value
=> Methods will either run null or return value. Return value will be passed as the third parameter to the
next method.

constructor(props)
static getDerivedStateFromProps(props, state)
render()
getSnapshotBeforeUpdate(preProps, preState)
componentDidMount(prevProps, prevState, snapshot)
=> Called after the render is finished in the re-render cycles
=> Cause side effects



Umounting Phase Methods
componentWillUnmount()
=> Method is invoked immediately before a component is unmounted and destroyed.
=> Cancelling any network requests removing event handlers, cancelling any suscriptions and also
invalidating timers.
=> Do not call the setState method.


Error Handling Phase Methods
static getDerivedStateFromError(error)

componentDidCatch(error, info)
=> When there is an error either during rendering, in a lifecycle method, or in the constructor of any child
component.










